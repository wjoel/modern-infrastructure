---
- name: Install apt-transport-https
  apt: name=apt-transport-https state=present

- name: Ensure that the Graylog repository is registered
  command: dpkg-query -W graylog-1.3-repository-debian8
  register: graylog_repository_check
  failed_when: graylog_repository_check.rc > 1
  changed_when: graylog_repository_check.rc == 1

- name: Download Graylog repository package
  when: graylog_repository_check.rc == 1
  get_url:
    url="https://packages.graylog2.org/repo/packages/graylog-1.3-repository-debian8_latest.deb"
    dest="/opt/graylog-repository.deb"

- name: Install Graylog repository package
  when: graylog_repository_check.rc == 1
  apt: deb="/opt/graylog-repository.deb"

- name: Install Graylog server
  apt: name=graylog-server state=present update_cache=yes

- name: Enable Graylog server service
  service: name=graylog-server enabled=yes

- name: Install Graylog web
  apt: name=graylog-web state=present update_cache=yes

- name: Enable Graylog web service
  service: name=graylog-web enabled=yes

- name: Generate root password hash
  shell: echo -n {{ lookup('password', playbook_dir + '/passwords/graylog_root_password chars=ascii_letters,digits,hexdigits length=20') }} | shasum -a 256 | awk '{ print $1; }'
  register: root_password_hash

- name: Configure Graylog server
  when: root_password_hash|success
  template:
    src=server.conf
    dest=/etc/graylog/server/server.conf
    owner=root
    group=root
  notify: Restart Graylog server

- name: Configure Graylog web
  template:
    src=web.conf
    dest=/etc/graylog/web/web.conf
    owner=root
    group=root
  notify: Restart Graylog web

- name: Install httplib2 for uri action
  apt: name=python-httplib2 state=present

- name: Wait for Graylog REST API to become available
  wait_for:
    host: "{{ ansible_eth1.ipv4.address }}"
    port: 12900
    timeout: 180

- name: Retrieve list of Graylog inputs
  uri:
    url: "http://{{ ansible_eth1.ipv4.address }}:12900/system/inputs"
    method: GET
    return_content: yes
    user: admin
    password: "{{ lookup('password', playbook_dir + '/passwords/graylog_root_password chars=ascii_letters,digits,hexdigits length=20')}}"
  register: graylog_inputs

- name: Extract names of Graylog inputs
  when: graylog_inputs|success
  set_fact:
    graylog_input_names: "{{ (graylog_inputs.content | from_json).inputs | map(attribute='message_input') | map(attribute='name') | list }}"

- name: Create Graylog syslog TCP input
  when: ("Syslog TCP" not in graylog_input_names)
  uri:
    url: "http://{{ ansible_eth1.ipv4.address }}:12900/system/inputs"
    method: POST
    body: "{{ lookup('file', 'create_syslog_tcp_input.json') }}"
    HEADER_Content-Type: "application/json"
    status_code: 201
    user: admin
    password: "{{ lookup('password', playbook_dir + '/passwords/graylog_root_password chars=ascii_letters,digits,hexdigits length=20')}}"

- name: Create Graylog syslog UDP input
  when: ("Syslog UDP" not in graylog_input_names)
  uri:
    url: "http://{{ ansible_eth1.ipv4.address }}:12900/system/inputs"
    method: POST
    body: "{{ lookup('file', 'create_syslog_udp_input.json') }}"
    HEADER_Content-Type: "application/json"
    status_code: 201
    user: admin
    password: "{{ lookup('password', playbook_dir + '/passwords/graylog_root_password chars=ascii_letters,digits,hexdigits length=20')}}"

- name: Create Graylog GELF TCP input
  when: ("GELF TCP" not in graylog_input_names)
  uri:
    url: "http://{{ ansible_eth1.ipv4.address }}:12900/system/inputs"
    method: POST
    body: "{{ lookup('file', 'create_gelf_tcp_input.json') }}"
    status_code: 201
    HEADER_Content-Type: "application/json"
    user: admin
    password: "{{ lookup('password', playbook_dir + '/passwords/graylog_root_password chars=ascii_letters,digits,hexdigits length=20')}}"

- name: Create Graylog GELF HTTP input
  when: ("GELF HTTP" not in graylog_input_names)
  uri:
    url: "http://{{ ansible_eth1.ipv4.address }}:12900/system/inputs"
    method: POST
    body: "{{ lookup('file', 'create_gelf_http_input.json') }}"
    status_code: 201
    HEADER_Content-Type: "application/json"
    user: admin
    password: "{{ lookup('password', playbook_dir + '/passwords/graylog_root_password chars=ascii_letters,digits,hexdigits length=20')}}"
